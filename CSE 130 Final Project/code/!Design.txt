DIRECTIVES
--------------------------------------------------------------------------------

- Print the guide table found in the comments of main.cpp, and CSE130Final.pdf

- Ask user to input number of inputs to check

- Generate random symptoms for each patient

- All seven symptoms are present or absent

- After generation, check all patients for covid, flu, and cold

- If patient symptoms match none of these, diagnose "other".

- Generate a final report of detailing the total amounts of all diagnoses, and
  their percentages
  
--------------------------------------------------------------------------------

BREAKDOwN (capital ws jank my IDE)

--------------------------------------------------------------------------------

D1. Basic print. Trial and error ASCII

D2. cin >> Number of patients

D3. 7 variables - 3 possible values (yes, no, sometimes) -
	rand 1 - 3 for value assignment on all seven variables
	
D4. Extra context for D3

D5. Compare chart to symptoms:
	- Diagnoses must contain all symptoms with *
	- Diagnoses may not contain symptoms with -
	- Diagnoses are unaffected by symptoms with +
	
D6. Assign all unfitting symptom groupings to "other"

D7. Print out all patient diagnostics, along with percentages:
	
	- Reuses D2 var for total patients
	
	- Needs 4 "total" variables
		* Covid total
		* Flu total
		* Cold total
		* Other illness total
		
	- Printing would be smoother if it had 4 pecentage variables
		* Covid% (covid t / patient t)
		* Flu%   (flu t / patient t)
		* Cold%  (cold t / patient t)
		* Other% (other t / patient t)
		
	- Individual patients need not be identified - can safely focus on
		total number icreases
-----------------------------------------------------------------

DETAILS

-----------------------------------------------------------------

Each illness needs to be identified only when the computer generates
	 symptoms of the illness - symptoms that are not a part of an
	 illness's symptom chart are disqualified from being that illness.
	 Other symptoms can be safely ignored. All categorizations should
	 increase total by one.
	 
	 EX: if ((fever) && (cough) && (shortBreath) && (!sneezing)) {
	 	hasCovid = true;
	 	covidTotal++;
	 }
	 
BELOw IS INCORRECT: Attributes are not members, and cannot be inherited {

Because each patient has the same traits tested, they can be a
	class or subclass object.
	- Heirachy notes:
		*Illnesses are identified by symptoms
		*Symptoms can occur independently
		*Totals rely on symptoms, but symptoms do not rely on totals
		*Patients get symptoms, and contribute to totals
		*Totals to be a trait of illness
		
	-Possible tree: Symptoms -> Illnesses -> Patients
	
} // end incorrect assumption

	Remove vestigal classes, or declare attributes within a method / constructor
	
----------------------------------------------------------------

PHILOSPHIES

---------------------------------------------------------------- information 

If a pointer can be changed from anywhere within valid scope, it may be exploited
	and affect otherwise irrelevant code -- if you pass through arguments, you only
	give access to a copy, and if that copy is damaged or exploited, only that copy,
	and those processes are affected. If you can reduce pointer use, and use more
	argument chaining, you may reduce attack surface, and mitigate potential harm,
	reducing risk.
	
	(My academic information security background comes in handy sometimes :D )

Use both endl and \n, to add readability

use std::func instead of namespace, to reduce load and attack surface

----------------------------------------------------------------

CONFUSIONS

----------------------------------------------------------------

Constructors - I'm definitely overthinking it, because it's just object instantiation,
			   but it does feel as though I'm missing something important.
			   

----------------------------------------------------------------
